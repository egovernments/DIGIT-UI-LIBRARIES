[{"C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\index.js":"1","C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\App.js":"2","C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\UICustomizations.js":"3"},{"size":1817,"mtime":1712121669657,"results":"4","hashOfConfig":"5"},{"size":3141,"mtime":1737527677147,"results":"6","hashOfConfig":"5"},{"size":24027,"mtime":1712121669647,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"6iyc8x",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\index.js",[],["16","17"],"C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\App.js",[],"C:\\Users\\arora\\OneDrive\\Desktop\\repo\\DIGIT-UI-LIBRARIES\\react\\example\\src\\UICustomizations.js",["18","19","20"],"import { Link } from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport { Amount} from \"@egovernments/digit-ui-components\";\r\n\r\n\r\n//create functions here based on module name set in mdms(eg->SearchProjectConfig)\r\n//how to call these -> Digit?.Customizations?.[masterName]?.[moduleName]\r\n// these functions will act as middlewares\r\nvar Digit = window.Digit || {};\r\n\r\nconst businessServiceMap = {\r\n  \"muster roll\": \"MR\",\r\n};\r\n\r\nconst inboxModuleNameMap = {\r\n  \"muster-roll-approval\": \"muster-roll-service\",\r\n};\r\n\r\nexport const UICustomizations = {\r\n  businessServiceMap,\r\n  updatePayload: (applicationDetails, data, action, businessService) => {\r\n    if (businessService === businessServiceMap.estimate) {\r\n      const workflow = {\r\n        comment: data.comments,\r\n        documents: data?.documents?.map((document) => {\r\n          return {\r\n            documentType: action?.action + \" DOC\",\r\n            fileName: document?.[1]?.file?.name,\r\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\r\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\r\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\r\n          };\r\n        }),\r\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\r\n        action: action.action,\r\n      };\r\n      //filtering out the data\r\n      Object.keys(workflow).forEach((key, index) => {\r\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\r\n      });\r\n\r\n      return {\r\n        estimate: applicationDetails,\r\n        workflow,\r\n      };\r\n    }\r\n    if (businessService === businessServiceMap.contract) {\r\n      const workflow = {\r\n        comment: data?.comments,\r\n        documents: data?.documents?.map((document) => {\r\n          return {\r\n            documentType: action?.action + \" DOC\",\r\n            fileName: document?.[1]?.file?.name,\r\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\r\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\r\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\r\n          };\r\n        }),\r\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\r\n        action: action.action,\r\n      };\r\n      //filtering out the data\r\n      Object.keys(workflow).forEach((key, index) => {\r\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\r\n      });\r\n\r\n      return {\r\n        contract: applicationDetails,\r\n        workflow,\r\n      };\r\n    }\r\n    if (businessService === businessServiceMap?.[\"muster roll\"]) {\r\n      const workflow = {\r\n        comment: data?.comments,\r\n        documents: data?.documents?.map((document) => {\r\n          return {\r\n            documentType: action?.action + \" DOC\",\r\n            fileName: document?.[1]?.file?.name,\r\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\r\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\r\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\r\n          };\r\n        }),\r\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\r\n        action: action.action,\r\n      };\r\n      //filtering out the data\r\n      Object.keys(workflow).forEach((key, index) => {\r\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\r\n      });\r\n\r\n      return {\r\n        musterRoll: applicationDetails,\r\n        workflow,\r\n      };\r\n    }\r\n    if (businessService === businessServiceMap?.[\"works.purchase\"]) {\r\n      const workflow = {\r\n        comment: data.comments,\r\n        documents: data?.documents?.map((document) => {\r\n          return {\r\n            documentType: action?.action + \" DOC\",\r\n            fileName: document?.[1]?.file?.name,\r\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\r\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\r\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\r\n          };\r\n        }),\r\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\r\n        action: action.action,\r\n      };\r\n      //filtering out the data\r\n      Object.keys(workflow).forEach((key, index) => {\r\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\r\n      });\r\n\r\n      const additionalFieldsToSet = {\r\n        projectId: applicationDetails.additionalDetails.projectId,\r\n        invoiceDate: applicationDetails.billDate,\r\n        invoiceNumber: applicationDetails.referenceId.split(\"_\")?.[1],\r\n        contractNumber: applicationDetails.referenceId.split(\"_\")?.[0],\r\n        documents: applicationDetails.additionalDetails.documents,\r\n      };\r\n      return {\r\n        bill: { ...applicationDetails, ...additionalFieldsToSet },\r\n        workflow,\r\n      };\r\n    }\r\n  },\r\n  enableModalSubmit: (businessService, action, setModalSubmit, data) => {\r\n    if (businessService === businessServiceMap?.[\"muster roll\"] && action.action === \"APPROVE\") {\r\n      setModalSubmit(data?.acceptTerms);\r\n    }\r\n  },\r\n  enableHrmsSearch: (businessService, action) => {\r\n    if (businessService === businessServiceMap.estimate) {\r\n      return action.action.includes(\"TECHNICALSANCTION\") || action.action.includes(\"VERIFYANDFORWARD\");\r\n    }\r\n    if (businessService === businessServiceMap.contract) {\r\n      return action.action.includes(\"VERIFY_AND_FORWARD\");\r\n    }\r\n    if (businessService === businessServiceMap?.[\"muster roll\"]) {\r\n      return action.action.includes(\"VERIFY\");\r\n    }\r\n    if (businessService === businessServiceMap?.[\"works.purchase\"]) {\r\n      return action.action.includes(\"VERIFY_AND_FORWARD\");\r\n    }\r\n    return false;\r\n  },\r\n  getBusinessService: (moduleCode) => {\r\n    if (moduleCode?.includes(\"estimate\")) {\r\n      return businessServiceMap?.estimate;\r\n    } else if (moduleCode?.includes(\"contract\")) {\r\n      return businessServiceMap?.contract;\r\n    } else if (moduleCode?.includes(\"muster roll\")) {\r\n      return businessServiceMap?.[\"muster roll\"];\r\n    } else if (moduleCode?.includes(\"works.purchase\")) {\r\n      return businessServiceMap?.[\"works.purchase\"];\r\n    } else if (moduleCode?.includes(\"works.wages\")) {\r\n      return businessServiceMap?.[\"works.wages\"];\r\n    } else if (moduleCode?.includes(\"works.supervision\")) {\r\n      return businessServiceMap?.[\"works.supervision\"];\r\n    } else {\r\n      return businessServiceMap;\r\n    }\r\n  },\r\n  getInboxModuleName: (moduleCode) => {\r\n    if (moduleCode?.includes(\"estimate\")) {\r\n      return inboxModuleNameMap?.estimate;\r\n    } else if (moduleCode?.includes(\"contract\")) {\r\n      return inboxModuleNameMap?.contracts;\r\n    } else if (moduleCode?.includes(\"attendence\")) {\r\n      return inboxModuleNameMap?.attendencemgmt;\r\n    } else {\r\n      return inboxModuleNameMap;\r\n    }\r\n  },\r\n\r\n  AttendanceInboxConfig: {\r\n    preProcess: (data) => {\r\n      //set tenantId\r\n      data.body.inbox.tenantId = Digit.ULBService.getCurrentTenantId();\r\n      data.body.inbox.processSearchCriteria.tenantId = Digit.ULBService.getCurrentTenantId();\r\n\r\n      const musterRollNumber = data?.body?.inbox?.moduleSearchCriteria?.musterRollNumber?.trim();\r\n      if (musterRollNumber) data.body.inbox.moduleSearchCriteria.musterRollNumber = musterRollNumber;\r\n\r\n      const attendanceRegisterName = data?.body?.inbox?.moduleSearchCriteria?.attendanceRegisterName?.trim();\r\n      if (attendanceRegisterName) data.body.inbox.moduleSearchCriteria.attendanceRegisterName = attendanceRegisterName;\r\n\r\n      // deleting them for now(assignee-> need clarity from pintu,ward-> static for now,not implemented BE side)\r\n      const assignee = _.clone(data.body.inbox.moduleSearchCriteria.assignee);\r\n      delete data.body.inbox.moduleSearchCriteria.assignee;\r\n      if (assignee?.code === \"ASSIGNED_TO_ME\") {\r\n        data.body.inbox.moduleSearchCriteria.assignee = Digit.UserService.getUser().info.uuid;\r\n      }\r\n\r\n      //cloning locality and workflow states to format them\r\n      // let locality = _.clone(data.body.inbox.moduleSearchCriteria.locality ? data.body.inbox.moduleSearchCriteria.locality : []);\r\n\r\n      let selectedOrg = _.clone(data.body.inbox.moduleSearchCriteria.orgId ? data.body.inbox.moduleSearchCriteria.orgId : null);\r\n      delete data.body.inbox.moduleSearchCriteria.orgId;\r\n      if (selectedOrg) {\r\n        data.body.inbox.moduleSearchCriteria.orgId = selectedOrg?.[0]?.applicationNumber;\r\n      }\r\n\r\n      // let selectedWard =  _.clone(data.body.inbox.moduleSearchCriteria.ward ? data.body.inbox.moduleSearchCriteria.ward : null);\r\n      // delete data.body.inbox.moduleSearchCriteria.ward;\r\n      // if(selectedWard) {\r\n      //    data.body.inbox.moduleSearchCriteria.ward = selectedWard?.[0]?.code;\r\n      // }\r\n\r\n      let states = _.clone(data.body.inbox.moduleSearchCriteria.state ? data.body.inbox.moduleSearchCriteria.state : []);\r\n      let ward = _.clone(data.body.inbox.moduleSearchCriteria.ward ? data.body.inbox.moduleSearchCriteria.ward : []);\r\n      // delete data.body.inbox.moduleSearchCriteria.locality;\r\n      delete data.body.inbox.moduleSearchCriteria.state;\r\n      delete data.body.inbox.moduleSearchCriteria.ward;\r\n\r\n      // locality = locality?.map((row) => row?.code);\r\n      states = Object.keys(states)?.filter((key) => states[key]);\r\n      ward = ward?.map((row) => row?.code);\r\n\r\n      // //adding formatted data to these keys\r\n      // if (locality.length > 0) data.body.inbox.moduleSearchCriteria.locality = locality;\r\n      if (states.length > 0) data.body.inbox.moduleSearchCriteria.status = states;\r\n      if (ward.length > 0) data.body.inbox.moduleSearchCriteria.ward = ward;\r\n      const projectType = _.clone(data.body.inbox.moduleSearchCriteria.projectType ? data.body.inbox.moduleSearchCriteria.projectType : {});\r\n      if (projectType?.code) data.body.inbox.moduleSearchCriteria.projectType = projectType.code;\r\n\r\n      //adding tenantId to moduleSearchCriteria\r\n      data.body.inbox.moduleSearchCriteria.tenantId = Digit.ULBService.getCurrentTenantId();\r\n\r\n      //setting limit and offset becoz somehow they are not getting set in muster inbox\r\n      data.body.inbox.limit = data.state.tableForm.limit;\r\n      data.body.inbox.offset = data.state.tableForm.offset;\r\n      delete data.state;\r\n      return data;\r\n    },\r\n    postProcess: (responseArray, uiConfig) => {\r\n      const statusOptions = responseArray?.statusMap\r\n        ?.filter((item) => item.applicationstatus)\r\n        ?.map((item) => ({ code: item.applicationstatus, i18nKey: `COMMON_MASTERS_${item.applicationstatus}` }));\r\n      if (uiConfig?.type === \"filter\") {\r\n        let fieldConfig = uiConfig?.fields?.filter((item) => item.type === \"dropdown\" && item.populators.name === \"musterRollStatus\");\r\n        if (fieldConfig.length) {\r\n          fieldConfig[0].populators.options = statusOptions;\r\n        }\r\n      }\r\n    },\r\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\r\n      if (key === \"ATM_MUSTER_ROLL_ID\") {\r\n        return (\r\n          <span className=\"link\">\r\n            <Link\r\n              to={`/${\r\n                window.contextPath\r\n              }/employee/attendencemgmt/view-attendance?tenantId=${Digit.ULBService.getCurrentTenantId()}&musterRollNumber=${value}`}\r\n            >\r\n              {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\r\n            </Link>\r\n          </span>\r\n        );\r\n      }\r\n      if (key === \"ATM_ATTENDANCE_WEEK\") {\r\n        const week = `${Digit.DateUtils.ConvertTimestampToDate(value?.startDate, \"dd/MM/yyyy\")}-${Digit.DateUtils.ConvertTimestampToDate(\r\n          value?.endDate,\r\n          \"dd/MM/yyyy\"\r\n        )}`;\r\n        return <div>{week}</div>;\r\n      }\r\n      if (key === \"ATM_NO_OF_INDIVIDUALS\") {\r\n        return <div>{value?.length}</div>;\r\n      }\r\n      if (key === \"ATM_AMOUNT_IN_RS\") {\r\n        return <span>{value ? Digit.Utils.dss.formatterWithoutRound(value, \"number\") : t(\"ES_COMMON_NA\")}</span>;\r\n      }\r\n      if (key === \"ATM_SLA\") {\r\n        return parseInt(value) > 0 ? (\r\n          <span className=\"sla-cell-success\">{t(value) || \"\"}</span>\r\n        ) : (\r\n          <span className=\"sla-cell-error\">{t(value) || \"\"}</span>\r\n        );\r\n      }\r\n      if (key === \"COMMON_WORKFLOW_STATES\") {\r\n        return <span>{t(`WF_MUSTOR_${value}`)}</span>;\r\n      }\r\n      //added this in case we change the key and not updated here , it'll throw that nothing was returned from cell error if that case is not handled here. To prevent that error putting this default\r\n      return <span>{t(`CASE_NOT_HANDLED`)}</span>;\r\n    },\r\n    MobileDetailsOnClick: (row, tenantId) => {\r\n      let link;\r\n      Object.keys(row).map((key) => {\r\n        if (key === \"ATM_MUSTER_ROLL_ID\")\r\n          link = `/${window.contextPath}/employee/attendencemgmt/view-attendance?tenantId=${tenantId}&musterRollNumber=${row[key]}`;\r\n      });\r\n      return link;\r\n    },\r\n    populateReqCriteria: () => {\r\n      const tenantId = Digit.ULBService.getCurrentTenantId();\r\n      return {\r\n        url: \"/org-services/organisation/v1/_search\",\r\n        params: { limit: 50, offset: 0 },\r\n        body: {\r\n          SearchCriteria: {\r\n            tenantId: tenantId,\r\n            functions: {\r\n              type: \"CBO\",\r\n            },\r\n          },\r\n        },\r\n        config: {\r\n          enabled: true,\r\n          select: (data) => {\r\n            return data?.organisations;\r\n          },\r\n        },\r\n      };\r\n    },\r\n  },\r\n  SearchWageSeekerConfig: {\r\n    customValidationCheck: (data) => {\r\n      //checking both to and from date are present\r\n      const { createdFrom, createdTo } = data;\r\n      if ((createdFrom === \"\" && createdTo !== \"\") || (createdFrom !== \"\" && createdTo === \"\"))\r\n        return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\r\n\r\n      return false;\r\n    },\r\n    preProcess: (data) => {\r\n      data.params = { ...data.params, tenantId: Digit.ULBService.getCurrentTenantId() };\r\n\r\n      let requestBody = { ...data.body.Individual };\r\n      const pathConfig = {\r\n        name: \"name.givenName\",\r\n      };\r\n      const dateConfig = {\r\n        createdFrom: \"daystart\",\r\n        createdTo: \"dayend\",\r\n      };\r\n      const selectConfig = {\r\n        wardCode: \"wardCode[0].code\",\r\n        socialCategory: \"socialCategory.code\",\r\n      };\r\n      const textConfig = [\"name\", \"individualId\"];\r\n      let Individual = Object.keys(requestBody)\r\n        .map((key) => {\r\n          if (selectConfig[key]) {\r\n            requestBody[key] = _.get(requestBody, selectConfig[key], null);\r\n          } else if (typeof requestBody[key] == \"object\") {\r\n            requestBody[key] = requestBody[key]?.code;\r\n          } else if (textConfig?.includes(key)) {\r\n            requestBody[key] = requestBody[key]?.trim();\r\n          }\r\n          return key;\r\n        })\r\n        .filter((key) => requestBody[key])\r\n        .reduce((acc, curr) => {\r\n          if (pathConfig[curr]) {\r\n            _.set(acc, pathConfig[curr], requestBody[curr]);\r\n          } else if (dateConfig[curr] && dateConfig[curr]?.includes(\"day\")) {\r\n            _.set(acc, curr, Digit.Utils.date.convertDateToEpoch(requestBody[curr], dateConfig[curr]));\r\n          } else {\r\n            _.set(acc, curr, requestBody[curr]);\r\n          }\r\n          return acc;\r\n        }, {});\r\n\r\n      data.body.Individual = { ...Individual };\r\n      return data;\r\n    },\r\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\r\n      //here we can add multiple conditions\r\n      //like if a cell is link then we return link\r\n      //first we can identify which column it belongs to then we can return relevant result\r\n      switch (key) {\r\n        case \"MASTERS_WAGESEEKER_ID\":\r\n          return (\r\n            <span className=\"link\">\r\n              <Link to={`/${window.contextPath}/employee/masters/view-wageseeker?tenantId=${row?.tenantId}&individualId=${value}`}>\r\n                {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\r\n              </Link>\r\n            </span>\r\n          );\r\n\r\n        case \"MASTERS_SOCIAL_CATEGORY\":\r\n          return value ? <span style={{ whiteSpace: \"nowrap\" }}>{String(t(`MASTERS_${value}`))}</span> : t(\"ES_COMMON_NA\");\r\n\r\n        case \"CORE_COMMON_PROFILE_CITY\":\r\n          return value ? <span style={{ whiteSpace: \"nowrap\" }}>{String(t(Digit.Utils.locale.getCityLocale(value)))}</span> : t(\"ES_COMMON_NA\");\r\n\r\n        case \"MASTERS_WARD\":\r\n          return value ? (\r\n            <span style={{ whiteSpace: \"nowrap\" }}>{String(t(Digit.Utils.locale.getMohallaLocale(value, row?.tenantId)))}</span>\r\n          ) : (\r\n            t(\"ES_COMMON_NA\")\r\n          );\r\n\r\n        case \"MASTERS_LOCALITY\":\r\n          return value ? (\r\n            <span style={{ whiteSpace: \"break-spaces\" }}>{String(t(Digit.Utils.locale.getMohallaLocale(value, row?.tenantId)))}</span>\r\n          ) : (\r\n            t(\"ES_COMMON_NA\")\r\n          );\r\n        default:\r\n          return t(\"ES_COMMON_NA\");\r\n      }\r\n    },\r\n    MobileDetailsOnClick: (row, tenantId) => {\r\n      let link;\r\n      Object.keys(row).map((key) => {\r\n        if (key === \"MASTERS_WAGESEEKER_ID\")\r\n          link = `/${window.contextPath}/employee/masters/view-wageseeker?tenantId=${tenantId}&wageseekerId=${row[key]}`;\r\n      });\r\n      return link;\r\n    },\r\n    additionalValidations: (type, data, keys) => {\r\n      if (type === \"date\") {\r\n        return data[keys.start] && data[keys.end] ? () => new Date(data[keys.start]).getTime() <= new Date(data[keys.end]).getTime() : true;\r\n      }\r\n    },\r\n  },\r\n  SearchWMSProjectConfig: {\r\n    preProcess: (data) => {\r\n      const createdFrom = Digit.Utils.pt.convertDateToEpoch(data.body.inbox.moduleSearchCriteria?.createdFrom, \"daystart\");\r\n      const createdTo = Digit.Utils.pt.convertDateToEpoch(data.body.inbox.moduleSearchCriteria?.createdTo);\r\n      const projectType = data.body.inbox.moduleSearchCriteria?.projectType?.code;\r\n      const boundary = data.body.inbox.moduleSearchCriteria?.boundary?.[0]?.code;\r\n      data.params = { ...data.params, tenantId: Digit.ULBService.getCurrentTenantId(), includeAncestors: true };\r\n      let projectName = data.body.inbox.moduleSearchCriteria?.projectName?.trim();\r\n      let projectNumber = data.body.inbox.moduleSearchCriteria?.projectNumber?.trim();\r\n      delete data.body.inbox.moduleSearchCriteria?.createdFrom;\r\n      delete data.body.inbox.moduleSearchCriteria?.ward;\r\n      delete data.body.inbox.moduleSearchCriteria?.createdTo;\r\n      data.body.inbox.tenantId = Digit.ULBService.getCurrentTenantId();\r\n      data.body.inbox.moduleSearchCriteria = {\r\n        ...data.body.inbox.moduleSearchCriteria,\r\n        tenantId: Digit.ULBService.getCurrentTenantId(),\r\n        projectNumber,\r\n        projectType,\r\n        projectName,\r\n        boundary,\r\n        createdFrom,\r\n        createdTo,\r\n      };\r\n\r\n      return data;\r\n    },\r\n    postProcess: (responseArray) => {\r\n      const listOfUuids = responseArray?.map((row) => row.auditDetails.createdBy);\r\n      const uniqueUuids = listOfUuids?.filter(function (item, i, ar) {\r\n        return ar.indexOf(item) === i;\r\n      });\r\n      const tenantId = Digit.ULBService.getCurrentTenantId();\r\n      const reqCriteria = {\r\n        url: \"/user/_search\",\r\n        params: {},\r\n        body: { tenantId, pageSize: 100, uuid: [...uniqueUuids] },\r\n        config: {\r\n          enabled: responseArray?.length > 0 ? true : false,\r\n          select: (data) => {\r\n            const usersResponse = data?.user;\r\n            responseArray?.forEach((row) => {\r\n              const uuid = row?.auditDetails?.createdBy;\r\n              const user = usersResponse?.filter((user) => user.uuid === uuid);\r\n              row.createdBy = user?.[0].name;\r\n            });\r\n            return responseArray;\r\n          },\r\n        },\r\n      };\r\n      const { isLoading: isPostProcessLoading, data: combinedResponse, isFetching: isPostProcessFetching } = Digit.Hooks.useCustomAPIHook(\r\n        reqCriteria\r\n      );\r\n\r\n      return {\r\n        isPostProcessFetching,\r\n        isPostProcessLoading,\r\n        combinedResponse,\r\n      };\r\n    },\r\n    customValidationCheck: (data) => {\r\n      //checking both to and from date are present\r\n      const { createdFrom, createdTo } = data;\r\n      if (createdTo !== \"\" && createdFrom === \"\") return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\r\n      else if (createdTo === \"\" && createdFrom !== \"\") return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\r\n\r\n      return false;\r\n    },\r\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\r\n      //here we can add multiple conditions\r\n      //like if a cell is link then we return link\r\n      //first we can identify which column it belongs to then we can return relevant result\r\n      switch (key) {\r\n        case \"WORKS_PROJECT_ID\":\r\n          return (\r\n            <span className=\"link\">\r\n              <Link to={`/${window.contextPath}/employee/project/project-details?tenantId=${row?.businessObject?.tenantId}&projectNumber=${value}`}>\r\n                {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\r\n              </Link>\r\n            </span>\r\n          );\r\n\r\n        case \"WORKS_PARENT_PROJECT_ID\":\r\n          return value ? (\r\n            <span className=\"link\">\r\n              <Link to={`/${window.contextPath}/employee/project/project-details?tenantId=${row?.businessObject?.tenantId}&projectNumber=${value}`}>\r\n                {String(value ? value : t(\"ES_COMMON_NA\"))}\r\n              </Link>\r\n            </span>\r\n          ) : (\r\n            t(\"ES_COMMON_NA\")\r\n          );\r\n\r\n        case \"WORKS_PROJECT_NAME\": {\r\n          let currentProject = searchResult?.filter((result) => result?.businessObject?.id === row?.businessObject?.id)[0];\r\n          return (\r\n            <div class=\"tooltip\">\r\n              <span class=\"textoverflow\" style={{ \"--max-width\": `${column?.maxLength}ch` }}>\r\n                {String(t(value))}\r\n              </span>\r\n              {/* check condtion - if length greater than 20 */}\r\n              <span class=\"tooltiptext\" style={{ whiteSpace: \"nowrap\" }}>\r\n                {currentProject?.businessObject?.description}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        case \"PROJECT_ESTIMATED_COST_IN_RS\":\r\n          return <Amount customStyle={{ textAlign: \"right\" }} value={value} t={t}></Amount>;\r\n\r\n        case \"ES_COMMON_LOCATION\": {\r\n          let currentProject = searchResult?.filter((result) => result?.businessObject.id === row?.businessObject.id)[0].businessObject;\r\n          const headerLocale = Digit.Utils.locale.getTransformedLocale(row?.businessObject.tenantId);\r\n          if (currentProject) {\r\n            let locality = currentProject?.address?.boundary ? t(`${headerLocale}_ADMIN_${currentProject?.address?.boundary}`) : \"\";\r\n            let ward = currentProject?.additionalDetails?.ward ? t(`${headerLocale}_ADMIN_${currentProject?.additionalDetails?.ward}`) : \"\";\r\n            let city = currentProject?.address?.city\r\n              ? t(`TENANT_TENANTS_${Digit.Utils.locale.getTransformedLocale(currentProject?.address?.city)}`)\r\n              : \"\";\r\n            return <p>{`${locality ? locality + \", \" : \"\"}${ward ? ward + \", \" : \"\"}${city}`}</p>;\r\n          }\r\n          return <p>{\"NA\"}</p>;\r\n        }\r\n\r\n        default:\r\n          return t(\"ES_COMMON_NA\");\r\n      }\r\n    },\r\n    additionalValidations: (type, data, keys) => {\r\n      if (type === \"date\") {\r\n        return data[keys.start] && data[keys.end] ? () => new Date(data[keys.start]).getTime() <= new Date(data[keys.end]).getTime() : true;\r\n      }\r\n    },\r\n    MobileDetailsOnClick: (row, tenantId) => {\r\n      let link;\r\n      Object.keys(row).map((key) => {\r\n        if (key === \"WORKS_PROJECT_ID\")\r\n          link = `/${window.contextPath}/employee/project/project-details?tenantId=${tenantId}&projectNumber=${row[key]}`;\r\n      });\r\n      return link;\r\n    },\r\n  }\r\n};\r\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":292,"column":34,"nodeType":"27","messageId":"28","endLine":292,"endColumn":36},{"ruleId":"25","severity":1,"message":"26","line":410,"column":34,"nodeType":"27","messageId":"28","endLine":410,"endColumn":36},{"ruleId":"25","severity":1,"message":"26","line":557,"column":34,"nodeType":"27","messageId":"28","endLine":557,"endColumn":36},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]